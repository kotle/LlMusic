package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yizisu.music.and.roomdblibrary.bean.SongWithSinger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONG_WITH_SINGER".
*/
public class SongWithSingerDao extends AbstractDao<SongWithSinger, Long> {

    public static final String TABLENAME = "SONG_WITH_SINGER";

    /**
     * Properties of entity SongWithSinger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SingerId = new Property(1, Long.class, "singerId", false, "SINGER_ID");
        public final static Property SongId = new Property(2, Long.class, "songId", false, "SONG_ID");
        public final static Property CreateTime = new Property(3, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(4, Long.class, "updateTime", false, "UPDATE_TIME");
    }


    public SongWithSingerDao(DaoConfig config) {
        super(config);
    }
    
    public SongWithSingerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONG_WITH_SINGER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SINGER_ID\" INTEGER," + // 1: singerId
                "\"SONG_ID\" INTEGER," + // 2: songId
                "\"CREATE_TIME\" INTEGER," + // 3: createTime
                "\"UPDATE_TIME\" INTEGER);"); // 4: updateTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_SONG_WITH_SINGER_SINGER_ID ON \"SONG_WITH_SINGER\"" +
                " (\"SINGER_ID\" ASC);");
        db.execSQL("CREATE INDEX " + constraint + "IDX_SONG_WITH_SINGER_SONG_ID ON \"SONG_WITH_SINGER\"" +
                " (\"SONG_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONG_WITH_SINGER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongWithSinger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long singerId = entity.getSingerId();
        if (singerId != null) {
            stmt.bindLong(2, singerId);
        }
 
        Long songId = entity.getSongId();
        if (songId != null) {
            stmt.bindLong(3, songId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(5, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongWithSinger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long singerId = entity.getSingerId();
        if (singerId != null) {
            stmt.bindLong(2, singerId);
        }
 
        Long songId = entity.getSongId();
        if (songId != null) {
            stmt.bindLong(3, songId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(5, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SongWithSinger readEntity(Cursor cursor, int offset) {
        SongWithSinger entity = new SongWithSinger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // singerId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // songId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // createTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongWithSinger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSingerId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSongId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SongWithSinger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SongWithSinger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SongWithSinger entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
